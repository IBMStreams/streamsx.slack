//
// ****************************************************************************
// * Copyright (C) 2017,2018 International Business Machines Corporation      *
// ****************************************************************************
//

/**
 * This sample application generates and sends a message to a Slack 
 * channel every 5 minutes (Slack time limit for refreshing message icons).
 * 
 * Each auto-generated message should alternate between the following
 * 3 icon emojis: { ":candy:", ":dango:", "fishcake" }.
 */
namespace com.ibm.streamsx.slack.sample.CustomIconEmoji ;

use com.ibm.streamsx.json::Json;
use com.ibm.streamsx.json::TupleToJSON;
use com.ibm.streamsx.slack::Message ;
use com.ibm.streamsx.slack::SendSlackMessage ;

public composite Main
{
	graph
		/**
		 * GenerateIteration outputs the current iteration count of the beacon.
		 */
		stream<int32 iteration> GenerateIteration = Beacon()
		{
			param
				period : 301.0 ;
				
			output
				GenerateIteration: iteration = (int32) IterationCount() + 1;
		}

		/**
		 * GenerateMessage generates a message using the current iteration count. The iteration count 
		 * also determines which variation of 3 icon emojis to use for the message.
		 */
		stream<Message, tuple<rstring icon_emoji>> GenerateMessage = Custom(GenerateIteration)
		{
			logic
				onTuple GenerateIteration :
				{
					if (GenerateIteration.iteration % 3 == 1) {
						submit({text = "This is auto-generated message #" + (rstring) GenerateIteration.iteration,
								icon_emoji = ":candy:"}, GenerateMessage);
					} else if (GenerateIteration.iteration % 3 == 2) {
						submit({text = "This is auto-generated message #" + (rstring) GenerateIteration.iteration,
								icon_emoji = ":dango:"}, GenerateMessage);
					} else if (GenerateIteration.iteration % 3 == 0) {
						submit({text = "This is auto-generated message #" + (rstring) GenerateIteration.iteration,
								icon_emoji = ":fish_cake:"}, GenerateMessage);
					}
				}
		}

                // Convert to JSON.
                stream<Json> JSONMessage = TupleToJSON(GenerateMessage) { }
		
		/**
		 * SendMessage sends the generated message to the given slack URL.
		 */
		() as SendMessage = SendSlackMessage(JSONMessage)
		{
			param
				slackUrl : getSubmissionTimeValue("slackUrl") ;
		}

}

