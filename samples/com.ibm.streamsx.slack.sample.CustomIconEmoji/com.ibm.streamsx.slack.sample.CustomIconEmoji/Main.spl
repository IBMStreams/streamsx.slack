//
// ****************************************************************************
// * Copyright (C) 2017, International Business Machines Corporation          *
// * All rights reserved.                                                     *
// ****************************************************************************
//

/**
 * This sample application generates and sends a message to a Slack 
 * channel every 5 minutes (Slack time limit for refreshing message icons).
 * 
 * Each auto-generated message should alternate between the following
 * 3 icon emojis: { ":candy:", ":dango:", "fishcake" }.
 */
namespace com.ibm.streamsx.slack.sample.CustomIconEmoji ;

use com.ibm.streamsx.slack::SendSlackMessage ;

composite Main
{
	graph
		/**
		 * GenerateIteration outputs the current iteration count of the beacon.
		 */
		stream<int32 iteration> GenerateIteration = Beacon()
		{
			param
				period : 300.0 ;
				
			output
				GenerateIteration: iteration = (int32) IterationCount() + 1;
		}

		/**
		 * GenerateMessage generates a message using the current iteration count. The iteration count 
		 * also determines which variation of 3 icon emojis to use for the message.
		 */
		stream<rstring message, rstring iconEmoji> GenerateMessage = Custom(GenerateIteration)
		{
			logic
				onTuple GenerateIteration :
				{
					if (GenerateIteration.iteration % 3 == 1) {
						submit({message = "This is auto-generated message #" + (rstring) GenerateIteration.iteration,
								iconEmoji = ":candy:"}, GenerateMessage);
					} else if (GenerateIteration.iteration % 3 == 2) {
						submit({message = "This is auto-generated message #" + (rstring) GenerateIteration.iteration,
								iconEmoji = ":dango:"}, GenerateMessage);
					} else if (GenerateIteration.iteration % 3 == 0) {
						submit({message = "This is auto-generated message #" + (rstring) GenerateIteration.iteration,
								iconEmoji = ":fish_cake:"}, GenerateMessage);
					}
				}
		}
		
		/**
		 * SendMessage sends the generated message to the given slack URL.
		 */
		() as SendMessage = SendSlackMessage(GenerateMessage)
		{
			param
				slackUrl : getSubmissionTimeValue("slackUrl") ;
				iconEmojiAttribute : iconEmoji ;
		}

}

